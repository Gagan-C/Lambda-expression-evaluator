/**
 *
 * Copyright (c) 1996-1997 Sun Microsystems, Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.
 *
 */

options {
  MULTI=true; // an option for JJTree
              // set to build a multi mode tree
              // (with different types of nodes)
  LOOKAHEAD=2;
  FORCE_LA_CHECK=true;
}

PARSER_BEGIN(Prog03)
import java.util.Scanner;

class Prog03 {
  public static void main(String args[]) {
    System.out.println(">>> Lambda Expression Evaluator <<<");
    System.out.println("Enter an applied Lambda expression:");
//  User input
    Prog03 t = new Prog03(System.in);
    try {
      ASTStart n = t.Start();
 
      SimpleNode rootNode = (SimpleNode) n.jjtGetChild(0);
      rootNode.dump("");
      System.out.println();
      System.out.println("The Lambda expression in the concrete syntax:");
      System.out.println(rootNode.astToString());
      System.out.println();
      System.out.println("The abstract syntax tree with free variables:");
      rootNode.dumpFV("");
      //Scanner sc = new Scanner(System.in);
      //System.out.println("Enter the variable to be substituted:");
      //String subVar=sc.nextLine();
      //System.out.println("Enter the substituting applied Lambda expression:");
      //Prog03 input2 = new Prog03(System.in);
      //ASTStart subExpr = input2.Start();      
      //subExpr.dump("");
      //System.out.println("The substitution result:");
     // SimpleNode newTree = rootNode.substitute(subVar,(SimpleNode)subExpr.jjtGetChild(0));
      //newTree.dump("");
    } catch (Exception e) {
      System.out.println("Error has occured please check below trace error");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Prog03)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN: /*LAMBDA*/
{
	<LAMBDA: "L">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}



ASTStart Start() : {}
{
  Expression()
  { return jjtThis; }
}



void Expression() #void : {}
{
  (
    MyID() | "+" #add | "-" #sub | "*" #mul | "/" #div
    |Integer() 
    |"(" ("L" MyID() ExpressionBody() #lamb(2))")"
    |"(" Expression() (Expression() #appl(2))* ")"
  )  
   
}

void ExpressionBody() #void : {} 
{
  (
    "." Expression() (Expression() #appl(2))*
    |MyID() ExpressionBody() #lamb(2)
 )
}

void MyID() :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}

void Integer() : 
{
	Token t;
}
{
  t=<INTEGER_LITERAL>
{
	jjtThis.setValue(t.image);
}
}
