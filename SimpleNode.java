/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.*;
public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Prog03 parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Prog03 p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return Prog03TreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

    //to convert into a concrete syntax 
    public String astToString(){
	// Leaf Node
	if(this.jjtGetNumChildren() ==0){
	    // Subtraction
	    if(this.getClass()==ASTsub.class){
		return "-";
	    }
	    //Addition
	    else if(this.getClass()==ASTadd.class){
		return "+";
	    }
	    // Multiplication
	    else if(this.getClass()==ASTmul.class){
		return "*";
	    }
	    // Division
	    else if(this.getClass()==ASTdiv.class){
		return "/";
	    }
	    //Identifiers
	    else{
		return this.toString();
	    }
	}
	else {
	    // functional applicaiton
	    if(this.getClass() == ASTappl.class){
		return "(" +((SimpleNode)this.jjtGetChild(0)).astToString() + " " 
		    + ( (SimpleNode) this.jjtGetChild(1)).astToString()
		    + ")";   
	    }
	    //Lambda abstraction
	    else { 
		return "( L " + ( (SimpleNode) this.jjtGetChild(0)).astToString() + " . " 
		    + ( (SimpleNode) this.jjtGetChild(1)).astToString()
		    + ")";
	    }
	}
  
    }
    public Set<String> freeVars(){
	// Leaf node
	if(this.jjtGetNumChildren() == 0){  
	    String s = this.toString();
	    Set<String> set1 = new HashSet<String>();
	    if(this.getClass() != ASTadd.class && this.getClass() != ASTdiv.class && this.getClass() != ASTmul.class && this.getClass() != ASTsub.class) {
		if(Character.isLetter(s.charAt(0))){
		    set1.add(s);
		}
	    }
	    return set1;
	}
	// Lambda Abstraction
	else if (this.toString() == "lamb") {   
	    Set<String> set1 = new HashSet<String>();
	    set1 = ((SimpleNode)this.jjtGetChild(1)).freeVars();
	    set1.remove(((SimpleNode)this.jjtGetChild(0)).toString());
	    return set1;
	}
	// Funtional applicaiton
	else {
	    Set<String> set1 = new HashSet<String>();
	    set1 = ((SimpleNode)this.jjtGetChild(1)).freeVars();

	    Set<String> set2 = new HashSet<String>();
	    set2 = ((SimpleNode)this.jjtGetChild(0)).freeVars();
	    // Union
	    set1.addAll(set2); 
	    return set1;
	} 
         
    }
    //Dumps values along with free variables
    public void dumpFV(String prefix) {
	System.out.println(prefix + "  " + this.freeVars());
	if (children != null) {
	    for (int i = 0; i < children.length; ++i) {
		SimpleNode n = (SimpleNode)children[i];
		if (n != null) {
		    n.dumpFV(prefix + " ");
		}
	    }
	}
    }
    // For generating random variable for alpha redux
    public static int counter = 0; 

    //Subsitutes free variable available in the rest of the tree
    public SimpleNode substitute (String var, SimpleNode expr){ 
	if(this.toString().equals(var)){
	    //  found node with variable to be substituted
	    return expr.cloneTree();
	}
	else if(this instanceof ASTappl) {
	    this.jjtAddChild(((SimpleNode)children[0]).substitute(var, expr.cloneTree()), 0);
	    this.jjtAddChild(((SimpleNode)children[1]).substitute(var, expr.cloneTree()), 1);
	    return this.cloneTree();
	}
	else if(this instanceof ASTlamb){
	    // Bound variable
	    if(children[0].toString().equals(var)){
		return this.cloneTree();
	    }
	    //bound var not free var in expr
	    else if(!expr.freeVars().contains(children[0].toString())){  
		((SimpleNode)children[1]).substitute(var, expr.cloneTree());
		return this.cloneTree();
	    }
	    else {
		// Alpha Redux
		// generating random string 
		String x = "" + String.valueOf(counter) + children[0].toString(); 
		counter++;
		String oldLeftChild = children[0].toString();

		((ASTMyID)children[0]).setName(x);
		((SimpleNode)children[1]).substitute(oldLeftChild, ((SimpleNode)children[0]).cloneTree());
		((SimpleNode)children[1]).substitute(var, expr.cloneTree()); 
		return this.cloneTree();
	    }
	}
	else {
	    return this.cloneTree();
	}
    }
  
    public SimpleNode cloneTree(){
	if(jjtGetNumChildren()!=0){
	    SimpleNode temp=this.clone(this.id);
	    temp.jjtAddChild(((SimpleNode)children[0]).cloneTree(),0);
	    temp.jjtAddChild(((SimpleNode)children[1]).cloneTree(),1);
	    return temp;
	}
	else{
	    return this.clone(this.id);
	}
	//   if(this instanceof ASTlamb){
	// ASTlamb temp = ((ASTlamb)this).clone(this.id);
	// temp.jjtAddChild(((SimpleNode)children[0]).cloneTree(),0);
	// temp.jjtAddChild(((SimpleNode)children[1]).cloneTree(),1);
	// return temp;
	//   }
	//   else if(this instanceof ASTappl) {
	// ASTappl temp = ((ASTappl)this).clone(this.id);
	// tempNode.jjtAddChild(((SimpleNode)children[0]).cloneTree(),0);
	// tempNode.jjtAddChild(((SimpleNode)children[1]).cloneTree(),1);
	// return tempNode;
	//   }
	//   else if(this instanceof ASTInteger) {
	// return ((ASTInteger)this).clone(this.id);
	
	//   }
	//   else if(this instanceof ASTMyID) {
	//  return ((ASTMyID)this).clone(this.id);
	
	//   }
	//   else if(this instanceof ASTadd){
	// return  ((ASTadd)this).clone(this.id);
	//   }
	//   else if(this instanceof ASTmul){
	// return ((ASTmul)this).clone(this.id);
	
	//   }
	//   else if(this instanceof ASTdiv){
	// return ((ASTdiv)this).clone(this.id);
	
	//   }
	//   else {
	// return ((ASTsub)this).clone(this.id);
	//   }
    }
    public SimpleNode clone(int id){
	return new SimpleNode(id);
    }
    public boolean checkBetaReduxNode(){
	if(this instanceof ASTappl && this.jjtGetChild(0) instanceof ASTlamb){
	    return true;
	}
	else {
	    return false;
	}
    }
  
    public boolean checkBetaReduxTree(){
	if(children != null){
	    if(this.checkBetaReduxNode()){
		return true;
	    }
	    else {
		return ((SimpleNode)this.jjtGetChild(0)).checkBetaReduxTree() || ((SimpleNode)this.jjtGetChild(1)).checkBetaReduxTree();
	    } 
	}    
	return false;  
    }
  
    public boolean checkDeltaReduxNode(){
	if(children == null) { 
	    return false;
	}
	else if(this instanceof ASTappl){
	    if(this.jjtGetChild(0).jjtGetNumChildren() == 0)
		{
		    return false;
		}  
	    else {
		boolean operator = (this.jjtGetChild(0).jjtGetChild(0)).toString().equals("add")
		    || (this.jjtGetChild(0).jjtGetChild(0)).toString().equals("sub")   
		    || (this.jjtGetChild(0).jjtGetChild(0)).toString().equals("mul") 
		    || (this.jjtGetChild(0).jjtGetChild(0)).toString().equals("div")
		    ;
  
		return this instanceof ASTappl && this.jjtGetChild(1) instanceof ASTInteger 
		      && operator
		    && this.jjtGetChild(0) instanceof ASTappl
		    && ((SimpleNode)this.jjtGetChild(0)).jjtGetChild(1) instanceof ASTInteger; 
		
	    }
	}
	else{
	    return false;
	}
    }
  
    public boolean checkDeltaReduxTree(){
	if(children == null) {
	    return false;
	}
	else if (this instanceof ASTappl){
	    if(this.checkDeltaReduxNode()){
		return true;
	    }
	    else {
		return (((SimpleNode)this.jjtGetChild(0)).checkDeltaReduxTree() || ((SimpleNode)this.jjtGetChild(1)).checkDeltaReduxTree());
	    } 
	}
	//lamb
	else {
	    return ((SimpleNode)this.jjtGetChild(1)).checkBetaReduxTree();
	}
	 
    }
    
    public SimpleNode betaRedux(){ //call using clone
	SimpleNode currentNode = this;
	SimpleNode rightChildAppl = (SimpleNode)this.jjtGetChild(1);
	SimpleNode lefttChildLamb = (SimpleNode)this.jjtGetChild(0).jjtGetChild(0);
	SimpleNode rightChildLamb = (SimpleNode)this.jjtGetChild(0).jjtGetChild(1);
	rightChildLamb = rightChildLamb.substitute(lefttChildLamb.toString(), rightChildAppl.cloneTree());
	currentNode = rightChildLamb.cloneTree();
	return currentNode.cloneTree();
    }
  
    public SimpleNode deltaReduxNode(){ //call using clone
	//   SimpleNode currentNode = this;
	SimpleNode rightChild = (SimpleNode) this.jjtGetChild(1);
	//   SimpleNode leftLeftGrandchild = (SimpleNode)((SimpleNode) this.jjtGetChild(0)).jjtGetChild(0);
	SimpleNode leftRightGrandchild = (SimpleNode)((SimpleNode) this.jjtGetChild(0)).jjtGetChild(1);
	
	if((this.jjtGetChild(0).jjtGetChild(0)).toString().equals("add")) {
	    
	    int left = Integer.parseInt(leftRightGrandchild.toString());
	    int right = Integer.parseInt(rightChild.toString());
	    int sum = left + right; 
	    System.out.println("sum " + sum);
	    ASTInteger tempNode = new ASTInteger(rightChild.id); //to create num node
	    tempNode.setValue(String.valueOf(sum));
	    return tempNode;
	}
	else if((this.jjtGetChild(0).jjtGetChild(0)).toString().equals("sub")) {
	    
	    int left = Integer.parseInt(leftRightGrandchild.toString());
	    int right = Integer.parseInt(rightChild.toString());
	    int sub = left - right; 
	    ASTInteger tempNode = new ASTInteger(rightChild.id); //to create num node
	    tempNode.setValue(String.valueOf(sub));
	    return tempNode;
	}
	else if((this.jjtGetChild(0).jjtGetChild(0)).toString().equals("div")) {
	    
	    int left = Integer.parseInt(leftRightGrandchild.toString());
	    int right = Integer.parseInt(rightChild.toString());
	    int div = left / right; 
	    ASTInteger tempNode = new ASTInteger(rightChild.id); //to create num node
	    tempNode.setValue(String.valueOf(div));
	    return tempNode;
	}
	else {
	    int left = Integer.parseInt(leftRightGrandchild.toString());
	    int right = Integer.parseInt(rightChild.toString());
	    int mul = left * right; 
	    ASTInteger tempNode = new ASTInteger(rightChild.id); //to create num node
	    tempNode.setValue(String.valueOf(mul));
	    return tempNode;
	}
    }
  
    public SimpleNode deltaReduxTree(){
	 
	SimpleNode currentNode = this.cloneTree();
	if(currentNode.checkDeltaReduxNode()){
	    currentNode = currentNode.deltaReduxNode();
	    return currentNode.cloneTree();
	}
	else if(((SimpleNode)this.jjtGetChild(0)).checkDeltaReduxTree()){
	    SimpleNode leftChild = ((SimpleNode)currentNode.jjtGetChild(0)).deltaReduxTree();
	    currentNode.jjtAddChild(leftChild.cloneTree(), 0);
	    return currentNode.cloneTree();
	}
	else {
	    SimpleNode rightChild = ((SimpleNode)currentNode.jjtGetChild(1)).deltaReduxTree();
	    currentNode.jjtAddChild(rightChild.cloneTree(), 1);
	    return currentNode.cloneTree();
	}
    }
  
    public SimpleNode normalOrderEvaluateOnce(){ //Will be called only if redux is present
	SimpleNode currentNode = this.cloneTree();
	if(currentNode.checkBetaReduxNode()){
	    currentNode = currentNode.betaRedux();
	    return currentNode.cloneTree();
	}
	else if(((SimpleNode)this.jjtGetChild(0)).checkBetaReduxTree()){
	    SimpleNode leftChild = ((SimpleNode)currentNode.jjtGetChild(0)).normalOrderEvaluateOnce();
	    currentNode.jjtAddChild(leftChild.cloneTree(), 0);
	    return currentNode.cloneTree();
	}
	else {
	    SimpleNode rightChild = ((SimpleNode)currentNode.jjtGetChild(1)).normalOrderEvaluateOnce();
	    currentNode.jjtAddChild(rightChild.cloneTree(), 1);
	    return currentNode.cloneTree();
	}
    }
      
  
    public SimpleNode normalOrderEvaluate(){
	SimpleNode currentNode = this.cloneTree();
	while(currentNode.checkBetaReduxTree()){
	    currentNode = currentNode.normalOrderEvaluateOnce();
	}
	while(currentNode.checkDeltaReduxTree()){
	    currentNode = currentNode.deltaReduxTree();
	}
	return currentNode;
    }
    //Subsitutes free variable available in the rest of the tree
    /*  public SimpleNode substitute(String var, SimpleNode expr){
	return expr;
	}*/
    /* Override this method if you want to customize how the node dumps
       out its children. */
  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
}

/* JavaCC - OriginalChecksum=ca21252ac543ef4a3853fd775611eca6 (do not edit this line) */
