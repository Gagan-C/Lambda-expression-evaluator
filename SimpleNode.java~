/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.*;
public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Prog03 parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Prog03 p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return Prog03TreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

    //to convert into a concrete syntax 
    public String astToString(){
	// Leaf Node
	if(this.jjtGetNumChildren() ==0){
	    // Subtraction
	    if(this.getClass()==ASTsub.class){
		return "-";
	    }
	    //Addition
	    else if(this.getClass()==ASTadd.class){
		return "+";
	    }
	    // Multiplication
	    else if(this.getClass()==ASTmul.class){
		return "*";
	    }
	    // Division
	    else if(this.getClass()==ASTdiv.class){
		return "/";
	    }
	    //Identifiers
	    else{
		return this.toString();
	    }
	}
	else {
	    // functional applicaiton
	    if(this.getClass() == ASTappl.class){
		return "(" +((SimpleNode)this.jjtGetChild(0)).astToString() + " " 
		    + ( (SimpleNode) this.jjtGetChild(1)).astToString()
		    + ")";   
	    }
	    //Lambda abstraction
	    else { 
		return "( L " + ( (SimpleNode) this.jjtGetChild(0)).astToString() + " . " 
		    + ( (SimpleNode) this.jjtGetChild(1)).astToString()
		    + ")";
	    }
	}
  
    }
    public Set<String> freeVars(){
	// Leaf node
	if(this.jjtGetNumChildren() == 0){  
	    String s = this.toString();
	    Set<String> set1 = new HashSet<String>();
	    if(this.getClass() != ASTadd.class && this.getClass() != ASTdiv.class && this.getClass() != ASTmul.class && this.getClass() != ASTsub.class) {
		if(Character.isLetter(s.charAt(0))){
		    set1.add(s);
		}
	    }
	    return set1;
	}
	// Lambda Abstraction
	else if (this.toString() == "lamb") {   
	    Set<String> set1 = new HashSet<String>();
	    set1 = ((SimpleNode)this.jjtGetChild(1)).freeVars();
	    set1.remove(((SimpleNode)this.jjtGetChild(0)).toString());
	    return set1;
	}
	// Funtional applicaiton
	else {
	    Set<String> set1 = new HashSet<String>();
	    set1 = ((SimpleNode)this.jjtGetChild(1)).freeVars();

	    Set<String> set2 = new HashSet<String>();
	    set2 = ((SimpleNode)this.jjtGetChild(0)).freeVars();
	    // Union
	    set1.addAll(set2); 
	    return set1;
	} 
         
    }
    //Dumps values along with free variables
    public void dumpFV(String prefix) {
	System.out.println(prefix + "  " + this.freeVars());
	if (children != null) {
	    for (int i = 0; i < children.length; ++i) {
		SimpleNode n = (SimpleNode)children[i];
		if (n != null) {
		    n.dumpFV(prefix + " ");
		}
	    }
	}
    }
    //Subsitutes free variable available in the rest of the tree
    /*  public SimpleNode substitute(String var, SimpleNode expr){
	return expr;
	}*/
    /* Override this method if you want to customize how the node dumps
       out its children. */
  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
}

/* JavaCC - OriginalChecksum=ca21252ac543ef4a3853fd775611eca6 (do not edit this line) */
